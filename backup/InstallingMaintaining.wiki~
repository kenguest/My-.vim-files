==Maintaining RSSME ==
rss.me is an [[https://wiki.blacknight.ie/index.php/Development_Notes#Working_with_AntiFwk AFK]] application with [http://pear.php.net/ PEAR] dependencies.
It also makes use of some portions of the Zend Framework.
                                                                                                                                                       
Thus, to push updates to production:    
 $ ./afk production

===Current Setup===
rss.me is deployed on priamus.

The docroot is:
/home/rssme/public_html

This is setup as a symlink which points to /home/rssme/apps/rssme/current - do not make any changes here, instead
make them locally and use afk to push them live so if a mistake is made it it possible to quickly rollback to a known working version.

The database is accessible via:
 $ mysql -urssme_admin -pUckU88os rssme_live

So using mysqldump, create a development instance of it for testing etc.

===Use of PEAR packages===
A separate instance/install of PEAR was prepared in the rssme home directory as per the instructions in 
[http://pear.php.net/manual/en/installation.shared.php the PEAR manual]. That way specific versions required for rss.me 
do not negatively impact on any other user of PEAR packages on priamus.

To install all PEAR packages that rss.me requires, use the package.xml file:
 $ pear install package.xml             
If any of the PEAR packages that rss.me utilises need to be upgraded, do this with the pear installer
 $ pear upgrade Mail_Queue             
Update the package.xml accordingly.
                                              
===Database===                                                                                                                                         
rss.me uses a database patching methodology to safely apply changes to the database:
* Files in the sql directory named in the manner patch-nnn.sql will be applied in sequence
* Files that have already been successfully applied won't be applied a second time.

===Unit Tests===                     
As a matter of best practice, unit tests should be run both before and after new functionality has been added 
to the application. Connection details are defined in environment variables so make a copy of setup-default.sh
and change as required. We use the [http://www.phpunit.de/manual/current/en/index.html PHPUnit framework].
                             
 $ cd tests/              
 $ cp setup-default.sh my-setup.sh       
 $ vim my-setup.sh
Run the selenium server in a separate console/terminal window. Then:
 $ (source my-setup.sh ; ./test)
Code coverage results will be written to the coverage directory.

[[Category:Development]]
